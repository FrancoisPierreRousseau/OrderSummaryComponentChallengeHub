@use "sass:map";
@use "sass:list";

@use "../settings/spacer";

/*-------------------------------------------------------------------*\
  #PROTOTYPE-SPACER

  Crée des classes utilitaires appropriées concernant les espacement
  ( source intéressante aller dans le code source de bootstrap dans
  le dossier utilities, les fichiers utilities et bootstrap grid )
\*--------------------------------------------------------------------*/

/*
 * Schema CSS de l'ensemble des propriétés des margin ( qui me sont pour l'instant nécessaire) :
 *   - Property: Nom de la property. Cela serra également le nom de la class par défaut
 *   - Class (optionnel): Customisation de la class. Si c'est appliqué, cela serra `class-property`
 *                        (ex: display-flex)
 *   - Base: Quelles sont les différents espacement impacté ( ici margin-top, margin-bottom ou les deux ect.).
 *           1-Haut 2-droite 3-bas 4-gauche ( pour les margins)
 *   - Values: Valeur que la property prendra ( une valeur = une classe utilitaire) :
 *             Chaque clés au sein de ces valeurs feront partie intégrante de la classe
 * @type Map
 */
$schema-spacer: (
        "no-margin": (
                responsive: true,
                property: margin,
                space-position: 1 2 3 4,
                values: 0
        ),
        "margin": (
                responsive: true,
                property: margin,
                space-position: 1 2 3 4,
                values: spacer.$spacer
        ),
        "margin-x": (
                responsive: true,
                property: margin,
                space-position: 2 4,
                values: spacer.$spacer
        ),
        "margin-y": (
                responsive: true,
                property: margin,
                space-position: 1 2,
                values: spacer.$spacer
        ),
        "margin-top": (
                responsive: true,
                property: margin,
                space-position: 1,
                values: spacer.$spacer
        ),
        "margin-end": (
                responsive: true,
                property: margin,
                space-position: 2,
                values: spacer.$spacer
        ),
        "margin-bottom": (
                responsive: true,
                property: margin,
                space-position: 3,
                values: spacer.$spacer
        ),
        "margin-start": (
                responsive: true,
                property: margin,
                space-position: 4,
                values: spacer.$spacer
        )
);

// Génération des classes utilitaires
@each $key, $utility in $schema-spacer {

  // Récupération des valeurs pour les placer au sein des classes,
  $value: map.get($utility, values);

  // Récupération des différentes espacements impactés ( margin bottom ? margin left ?)
  $space-position: map.get($utility, space-position);

  // Récupération de la propriété associé à la classe utilitaire
  $property: map.get($utility, property);

  // Utilisation d'une classe personalise si présente sinon la classe serra le nom de la propriété
  $property-class: if(map.has-key($utility, class), map.get($utility, class), $property);

  // Initialisation d'une variable qui stockera les espacement
  $spaces: 0 0 0 0;

  $number-position: 4;
  $index: 1;
  // set-nth(10px 20px 30px, 1, 2em)
  @each $position in $space-position {
    $spaces: list.set-nth($spaces, $position, $value);
  }
  @debug $spaces;
  // Si `$key` est pas null alors le class serra composé de la clé
  $property-class-modifier: if($key != null, #{$key}, $property-class);
  // Si `$value`est null alors il n'y a pas de clés au sein de la map, donc `$value` vaudra `$key`
  $value: if($value == null, $key, $value);

  .#{$property-class-modifier} {
    #{$property}: #{$spaces} !important;
  }
}
